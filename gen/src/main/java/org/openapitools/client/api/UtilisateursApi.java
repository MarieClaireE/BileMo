/*
 * Bilemo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.Utilisateurs;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UtilisateursApi {
    private ApiClient localVarApiClient;

    public UtilisateursApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UtilisateursApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for utilisateursGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Un tableau JSON d&#39;utilisateurs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utilisateurs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilisateursGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = utilisateursGetCall(_callback);
        return localVarCall;

    }

    /**
     * Retourne un tableau d&#39;utilisateurs
     * 
     * @return List&lt;Utilisateurs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Un tableau JSON d&#39;utilisateurs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public List<Utilisateurs> utilisateursGet() throws ApiException {
        ApiResponse<List<Utilisateurs>> localVarResp = utilisateursGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retourne un tableau d&#39;utilisateurs
     * 
     * @return ApiResponse&lt;List&lt;Utilisateurs&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Un tableau JSON d&#39;utilisateurs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Utilisateurs>> utilisateursGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = utilisateursGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Utilisateurs>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retourne un tableau d&#39;utilisateurs (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Un tableau JSON d&#39;utilisateurs </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursGetAsync(final ApiCallback<List<Utilisateurs>> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilisateursGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Utilisateurs>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilisateursPost
     * @param inlineObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursPostCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject;

        // create path and map variables
        String localVarPath = "/utilisateurs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilisateursPostValidateBeforeCall(InlineObject inlineObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inlineObject' is set
        if (inlineObject == null) {
            throw new ApiException("Missing the required parameter 'inlineObject' when calling utilisateursPost(Async)");
        }
        

        okhttp3.Call localVarCall = utilisateursPostCall(inlineObject, _callback);
        return localVarCall;

    }

    /**
     * Créer un utilisateur
     * 
     * @param inlineObject  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public void utilisateursPost(InlineObject inlineObject) throws ApiException {
        utilisateursPostWithHttpInfo(inlineObject);
    }

    /**
     * Créer un utilisateur
     * 
     * @param inlineObject  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> utilisateursPostWithHttpInfo(InlineObject inlineObject) throws ApiException {
        okhttp3.Call localVarCall = utilisateursPostValidateBeforeCall(inlineObject, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Créer un utilisateur (asynchronously)
     * 
     * @param inlineObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur créé </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursPostAsync(InlineObject inlineObject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilisateursPostValidateBeforeCall(inlineObject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilisateursUserIdDelete
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utilisateur supprimé. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;utilisateur est introuvable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursUserIdDeleteCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utilisateurs/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilisateursUserIdDeleteValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling utilisateursUserIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = utilisateursUserIdDeleteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Supprimer un utilisateur
     * 
     * @param userId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utilisateur supprimé. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;utilisateur est introuvable. </td><td>  -  </td></tr>
     </table>
     */
    public void utilisateursUserIdDelete(Long userId) throws ApiException {
        utilisateursUserIdDeleteWithHttpInfo(userId);
    }

    /**
     * Supprimer un utilisateur
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utilisateur supprimé. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;utilisateur est introuvable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> utilisateursUserIdDeleteWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = utilisateursUserIdDeleteValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Supprimer un utilisateur (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Utilisateur supprimé. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;utilisateur est introuvable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursUserIdDeleteAsync(Long userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilisateursUserIdDeleteValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilisateursUserIdGet
     * @param userId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tableau JSON d&#39;un utilisateur </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursUserIdGetCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/utilisateurs/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilisateursUserIdGetValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling utilisateursUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = utilisateursUserIdGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Retourne les détails d&#39;un utilisateur
     * 
     * @param userId  (required)
     * @return Utilisateurs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tableau JSON d&#39;un utilisateur </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public Utilisateurs utilisateursUserIdGet(Long userId) throws ApiException {
        ApiResponse<Utilisateurs> localVarResp = utilisateursUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Retourne les détails d&#39;un utilisateur
     * 
     * @param userId  (required)
     * @return ApiResponse&lt;Utilisateurs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tableau JSON d&#39;un utilisateur </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Utilisateurs> utilisateursUserIdGetWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = utilisateursUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Utilisateurs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retourne les détails d&#39;un utilisateur (asynchronously)
     * 
     * @param userId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tableau JSON d&#39;un utilisateur </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursUserIdGetAsync(Long userId, final ApiCallback<Utilisateurs> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilisateursUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Utilisateurs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for utilisateursUserIdPut
     * @param userId  (required)
     * @param inlineObject1  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur modifié </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utilisateur introuvable, vérifié l&#39;UserID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursUserIdPutCall(Long userId, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineObject1;

        // create path and map variables
        String localVarPath = "/utilisateurs/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call utilisateursUserIdPutValidateBeforeCall(Long userId, InlineObject1 inlineObject1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling utilisateursUserIdPut(Async)");
        }
        
        // verify the required parameter 'inlineObject1' is set
        if (inlineObject1 == null) {
            throw new ApiException("Missing the required parameter 'inlineObject1' when calling utilisateursUserIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = utilisateursUserIdPutCall(userId, inlineObject1, _callback);
        return localVarCall;

    }

    /**
     * Modifier un utilisateur
     * 
     * @param userId  (required)
     * @param inlineObject1  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur modifié </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utilisateur introuvable, vérifié l&#39;UserID </td><td>  -  </td></tr>
     </table>
     */
    public void utilisateursUserIdPut(Long userId, InlineObject1 inlineObject1) throws ApiException {
        utilisateursUserIdPutWithHttpInfo(userId, inlineObject1);
    }

    /**
     * Modifier un utilisateur
     * 
     * @param userId  (required)
     * @param inlineObject1  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur modifié </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utilisateur introuvable, vérifié l&#39;UserID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> utilisateursUserIdPutWithHttpInfo(Long userId, InlineObject1 inlineObject1) throws ApiException {
        okhttp3.Call localVarCall = utilisateursUserIdPutValidateBeforeCall(userId, inlineObject1, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modifier un utilisateur (asynchronously)
     * 
     * @param userId  (required)
     * @param inlineObject1  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Utilisateur modifié </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Utilisateur introuvable, vérifié l&#39;UserID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call utilisateursUserIdPutAsync(Long userId, InlineObject1 inlineObject1, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = utilisateursUserIdPutValidateBeforeCall(userId, inlineObject1, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
