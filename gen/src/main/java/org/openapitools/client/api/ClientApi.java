/*
 * Bilemo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Client;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClientApi {
    private ApiClient localVarApiClient;

    public ClientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for clientsClientIdDelete
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsClientIdDeleteCall(Long clientId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsClientIdDeleteValidateBeforeCall(Long clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientsClientIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = clientsClientIdDeleteCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * Delete customer by Id.
     * 
     * @param clientId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientId not found. </td><td>  -  </td></tr>
     </table>
     */
    public void clientsClientIdDelete(Long clientId) throws ApiException {
        clientsClientIdDeleteWithHttpInfo(clientId);
    }

    /**
     * Delete customer by Id.
     * 
     * @param clientId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientId not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> clientsClientIdDeleteWithHttpInfo(Long clientId) throws ApiException {
        okhttp3.Call localVarCall = clientsClientIdDeleteValidateBeforeCall(clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete customer by Id. (asynchronously)
     * 
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Customer deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> ClientId not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsClientIdDeleteAsync(Long clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsClientIdDeleteValidateBeforeCall(clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsClientIdGet
     * @param clientId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Customer with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Expired JWT Token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsClientIdGetCall(Long clientId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsClientIdGetValidateBeforeCall(Long clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling clientsClientIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = clientsClientIdGetCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * Returns a customer by Id.
     * 
     * @param clientId  (required)
     * @return Client
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Customer with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Expired JWT Token </td><td>  -  </td></tr>
     </table>
     */
    public Client clientsClientIdGet(Long clientId) throws ApiException {
        ApiResponse<Client> localVarResp = clientsClientIdGetWithHttpInfo(clientId);
        return localVarResp.getData();
    }

    /**
     * Returns a customer by Id.
     * 
     * @param clientId  (required)
     * @return ApiResponse&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Customer with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Expired JWT Token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Client> clientsClientIdGetWithHttpInfo(Long clientId) throws ApiException {
        okhttp3.Call localVarCall = clientsClientIdGetValidateBeforeCall(clientId, null);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a customer by Id. (asynchronously)
     * 
     * @param clientId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Customer with the specified ID was not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Expired JWT Token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsClientIdGetAsync(Long clientId, final ApiCallback<Client> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsClientIdGetValidateBeforeCall(clientId, _callback);
        Type localVarReturnType = new TypeToken<Client>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clientsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array returning id, email and role of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/clients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "JWT" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clientsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = clientsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Returns a list of customers.
     * 
     * @return List&lt;Client&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array returning id, email and role of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public List<Client> clientsGet() throws ApiException {
        ApiResponse<List<Client>> localVarResp = clientsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Returns a list of customers.
     * 
     * @return ApiResponse&lt;List&lt;Client&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array returning id, email and role of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Client>> clientsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = clientsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Client>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of customers. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A JSON array returning id, email and role of customers. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Le token d&#39;accès est invalide ou manquant </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clientsGetAsync(final ApiCallback<List<Client>> _callback) throws ApiException {

        okhttp3.Call localVarCall = clientsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Client>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
